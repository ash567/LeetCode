class Solution {
    bool dfs(int id, vector<int>& color, const vector<vector<int>>& graph, int nodeColor) {
        if(color[id] == -1) {
            color[id] = nodeColor;
            int nextNodeColor = 1 - nodeColor;
            for(int i : graph[id]) {
                if(!dfs(i, color, graph, nextNodeColor))
                    return false;
            }
            return true;
        } else {
            return color[id] == nodeColor;
        }
    }
    
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color(graph.size(), -1);
        for(int i = 0; i < graph.size(); i++) {
            if(color[i] != -1)
                continue;
            if(!dfs(i, color, graph, 0))
                return false;
        }
        return true;
    }
};
